// This file has been autogenerated from parsing an Objective-C header file added in Xcode.

using System;
using System.Collections.Generic;

using MonoTouch.Foundation;
using MonoTouch.UIKit;

using khs.interval.model;

namespace khs.interval
{
	public partial class IntervalDetailViewController : UITableViewController
	{
		private Interval Domain { get; set; }
		private IntervalMainViewController ParentController { get; set; }

		public IntervalDetailViewController (IntPtr handle) : base (handle)
		{
		}

		public void SetInterval (IntervalMainViewController controller, Interval interval)
		{
			Domain = interval;
			ParentController = controller;
		}

		private void ConfigureView ()
		{
			// Update the user interface for the detail item
			StartButton.Clicked += (sender, e) => 
			{
				StartInterval();
			};
		}

		private void StartInterval ()
		{		
			var detail = (StartViewController) Storyboard.InstantiateViewController("startinterval");
			detail.SetInterval (this, Domain);
			NavigationController.PushViewController (detail, true);

		}
		
		public override void DidReceiveMemoryWarning ()
		{
			// Releases the view if it doesn't have a superview.
			base.DidReceiveMemoryWarning ();
			
			// Release any cached data, images, etc that aren't in use.
		}
		
		#region View lifecycle
		
		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			
			// Perform any additional setup after loading the view, typically from a nib.
			ConfigureView ();
		}
		
		public override void ViewDidUnload ()
		{
			base.ViewDidUnload ();
			
			// Clear any references to subviews of the main view in order to
			// allow the Garbage Collector to collect them sooner.
			//
			// e.g. myOutlet.Dispose (); myOutlet = null;
			
			ReleaseDesignerOutlets ();
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

		}
		
		public override void ViewDidAppear (bool animated)
		{
			base.ViewDidAppear (animated);
			Name.Text = Domain.Name;
			Instructions.Text = Domain.Instructions;
			WarmUp.Text = Domain.
			Sets.Text = Domain.Sets.ToString();
			RestTime.Text = Domain.Recovery.ToString();
			WorkTime.Text = Domain.CountInterval.ToString();
			CoolDownTime.Text =  Domain.Cooldown.ToString();
//			WarmUpTime.Text = Domain.
			//SecondsIndicator.IsEnabled(Domain.SecondsIndicator);
		}
		
		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);
		}
		
		public override void ViewDidDisappear (bool animated)
		{
			base.ViewDidDisappear (animated);
		}
		
		#endregion
		
		public override bool ShouldAutorotateToInterfaceOrientation (UIInterfaceOrientation toInterfaceOrientation)
		{
			// Return true for supported orientations
			return (toInterfaceOrientation != UIInterfaceOrientation.PortraitUpsideDown);
		}
	}
}
